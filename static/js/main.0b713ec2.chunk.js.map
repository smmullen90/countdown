{"version":3,"sources":["App.js","serviceWorker.js","stores/countdownStore.js","index.js"],"names":["App","inject","observer","props","countdownStore","useEffect","interval","setInterval","calculate","clearInterval","daysUntil","secondsUntil","hoursUntil","minutesUntil","countdownDate","className","toLocaleDateString","Boolean","window","location","hostname","match","SECONDS_IN","CountdownStore","Date","Math","floor","this","timeUntilSec","observable","action","diff","now","console","log","computed","stores","PropTypes","shape","number","func","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iNAoCeA,EA/BHC,YAAO,iBAAPA,CAAyBC,aAAS,SAACC,GAAW,IAChDC,EAAmBD,EAAnBC,eAERC,qBAAU,WACR,IAAMC,EAAWC,YAAYH,EAAeI,UAAW,KACvD,OAAO,WAAkBC,cAAcH,MACtC,CAACF,EAAeI,YANoC,IASrDE,EAKEN,EALFM,UACAC,EAIEP,EAJFO,aACAC,EAGER,EAHFQ,WACAC,EAEET,EAFFS,aACAC,EACEV,EADFU,cAGF,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,oDACA,uBAAGA,UAAU,kBACVL,EADH,UACqBE,EADrB,WACyCC,EADzC,aACiEF,EADjE,YAGA,iCAAOG,EAAcE,qBAArB,YCjBUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8xBCdN,IAAMC,EACC,MADDA,EAEE,KAFFA,EAGI,GAEWC,G,wKAGnBT,cAAgB,IAAIU,KAAK,KAAM,EAAG,GAAI,EAAG,GAAI,G,oFAW3C,OAAOC,KAAKC,MAAMC,KAAKC,aAAeN,K,iCAKtC,OAAOG,KAAKC,MAAMC,KAAKC,aAAeN,GAAmB,K,mCAKzD,OAAOG,KAAKC,MAAMC,KAAKC,aAAeN,GAAqB,K,mCAK3D,OAAOG,KAAKC,MAAMC,KAAKC,cAAgB,Q,2DA5BxCC,K,2FAIAC,K,oFACW,WACV,IAAMC,GAAQ,EAAKjB,cAAgBU,KAAKQ,OAAS,IACjD,EAAKJ,aAAeG,GAAQ,EAAI,EAAIA,EACpCE,QAAQC,IAAI,oB,2BAGbC,K,kGAKAA,K,qGAKAA,K,uGAKAA,K,4EC5BGC,GDkCoCC,IAAUC,MAAM,CACxDV,aAAcS,IAAUE,OACxB3B,WAAYyB,IAAUE,OACtB7B,UAAW2B,IAAUE,OACrB1B,aAAcwB,IAAUE,OACxB5B,aAAc0B,IAAUE,OACxB/B,UAAW6B,IAAUG,OCxCR,CACbpC,eAAgB,IAAImB,IAGtBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAaP,EACZ,kBAAC,EAAD,QAGJQ,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,a","file":"static/js/main.0b713ec2.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\nimport { inject, observer } from 'mobx-react';\n\n\nconst App = inject('countdownStore')(observer((props) => {\n  const { countdownStore } = props;\n\n  useEffect(() => {\n    const interval = setInterval(countdownStore.calculate, 1000);\n    return () => { debugger; clearInterval(interval)};\n  }, [countdownStore.calculate]);\n\n  const {\n    daysUntil,\n    secondsUntil,\n    hoursUntil,\n    minutesUntil,\n    countdownDate\n  } = countdownStore;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <p>Shaun heads to PDX in</p>\n          <p className=\"countdown-date\">\n            {daysUntil} days, {hoursUntil} hours, {minutesUntil} minutes, {secondsUntil} seconds\n          </p>\n          <p>on {countdownDate.toLocaleDateString()}.</p>\n        </div>\n      </header>\n    </div>\n  );\n}));\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import PropTypes from 'prop-types';\nimport { action, computed, observable } from 'mobx';\n\n\nconst SECONDS_IN = {\n  day: 86400,\n  hour: 3600,\n  minute: 60\n};\nexport default class CountdownStore {\n  @observable timeUntilSec;\n\n  countdownDate = new Date(2020, 5, 13, 9, 30, 0);\n\n  @action\n  calculate = () => {\n    const diff = (this.countdownDate - Date.now()) / 1000;\n    this.timeUntilSec = diff <= 0 ? 0 : diff;\n    console.log('in calculate');\n  }\n\n  @computed\n  get daysUntil() {\n    return Math.floor(this.timeUntilSec / SECONDS_IN.day);\n  }\n\n  @computed\n  get hoursUntil() {\n    return Math.floor(this.timeUntilSec / SECONDS_IN.hour) % 24;\n  }\n\n  @computed\n  get minutesUntil() {\n    return Math.floor(this.timeUntilSec / SECONDS_IN.minute) % 60;\n  }\n\n  @computed\n  get secondsUntil() {\n    return Math.floor(this.timeUntilSec) % 60;\n  }\n}\n\nexport const COUNTDOWN_STORE_PROP_TYPES = PropTypes.shape({\n  timeUntilSec: PropTypes.number,\n  hoursUntil: PropTypes.number,\n  daysUntil: PropTypes.number,\n  minutesUntil: PropTypes.number,\n  secondsUntil: PropTypes.number,\n  calculate: PropTypes.func,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'mobx-react';\nimport CountdownStore from './stores/countdownStore';\n\nconst stores = {\n  countdownStore: new CountdownStore(),\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider {...stores}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}